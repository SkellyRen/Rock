<template>
    <button :class="buttonCssClass"
            :title="actionTooltip"
            @click.prevent.stop="onActionClick">
        <i :class="iconCssClass"></i>
    </button>
</template>

<script setup lang="ts">
    import { isPromise } from "@Obsidian/Utility/promiseUtils";
    import { computed, PropType, ref } from "vue";
    import { GridAction } from "@Obsidian/Types/Controls/grid";

    const props = defineProps({
        action: {
            type: Object as PropType<GridAction>,
            required: true
        }
    });

    const isExecuting = ref(false);

    const actionTooltip = computed((): string | undefined => {
        return props.action.tooltip;
    });

    const buttonCssClass = computed((): string => {
        let classes = "btn btn-grid-action";

        if (props.action.buttonCssClass) {
            classes += ` ${props.action.buttonCssClass}`;
        }

        if (isExecuting.value || props.action.disabled) {
            classes += " disabled";
        }

        return classes;
    });

    const iconCssClass = computed((): string => {
        return props.action.iconCssClass || "fa fa-square";
    });

    const onActionClick = async (): Promise<void> => {
        if (props.action.handler && !props.action.disabled && !isExecuting.value) {
            isExecuting.value = true;

            try {
                const result = props.action.handler();

                if (isPromise(result)) {
                    await result;
                }
            }
            finally {
                isExecuting.value = false;
            }
        }
    };
</script>
