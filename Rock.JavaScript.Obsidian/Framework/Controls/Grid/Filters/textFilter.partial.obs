<template>
    <div class="grid-filter-popup-body">
        <DropDownList v-model="searchMethod"
                      inputClasses="mb-2"
                      :showBlankItem="false"
                      :items="searchTypeItems" />

        <TextBox v-model="searchValue" />
    </div>
</template>

<script setup lang="ts">
    import TextBox from "@Obsidian/Controls/textBox";
    import DropDownList from "@Obsidian/Controls/dropDownList";
    import { standardFilterProps } from "@Obsidian/Core/Controls/grid";
    import { TextFilterMethod, TextFilterMethodDescription } from "@Obsidian/Enums/Controls/Grid/textFilterMethod";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { ref, watch } from "vue";

    type TextSearchBag = {
        method: TextFilterMethod;

        value?: string;
    };

    const props = defineProps(standardFilterProps);

    const emit = defineEmits<{
        (e: "update:modelValue", value: unknown): void
    }>();

    const searchMethod = ref(TextFilterMethod.Equals.toString());
    const searchValue = ref(typeof (props.modelValue) === "string" ? props.modelValue : "");

    const searchTypeItems = ref<ListItemBag[]>(Object.keys(TextFilterMethodDescription).map(n => {
        return {
            value: n,
            text: TextFilterMethodDescription[n]
        };
    }));

    function updateModelValue(): void {
        if (!searchValue.value === null) {
            emit("update:modelValue", undefined);
            return;
        }

        const searchBag: TextSearchBag = {
            method: Number(searchMethod.value) as TextFilterMethod,
            value: searchValue.value ?? undefined
        };

        emit("update:modelValue", searchValue.value ? searchBag : undefined);
    }

    function updateSearchValues(): void {
        if (props.modelValue && typeof props.modelValue === "object") {
            const modelSearchBag = props.modelValue as Partial<TextSearchBag>;

            if (modelSearchBag.method !== undefined) {
                searchMethod.value = modelSearchBag.method.toString();
                searchValue.value = modelSearchBag.value ?? "";

                return;
            }
        }

        searchMethod.value = TextFilterMethod.Equals.toString();
        searchValue.value = "";
    }

    watch(() => props.modelValue, () => updateSearchValues());
    watch([searchMethod, searchValue], () => updateModelValue());

    updateSearchValues();
</script>
