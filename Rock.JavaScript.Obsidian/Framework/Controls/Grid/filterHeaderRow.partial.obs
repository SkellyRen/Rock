<template>
    <tr>
        <th class="grid-filter" :colspan="visibleColumnCount">
            <div class="d-flex">
                <div class="grid-title">
                    Group Members
                </div>

                <div v-if="isFilterable" class="grid-quick-filter grid-actions">
                    <button class="btn btn-grid-action" title="Search" @click.stop.prevent="onSearchClick">
                        <i class="fa fa-search"></i>
                    </button>

                    <div :style="searchBoxStyle">
                        <TextBox v-model="filterValue" placeholder="Filter" />
                    </div>
                </div>

                <ActionGroup :gridActions="gridActions" />
            </div>
        </th>
    </tr>
</template>

<script setup lang="ts">
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import TextBox from "@Obsidian/Controls/textBox";
    import { PropType, computed, ref } from "vue";
    import ActionGroup from "./actionGroup.partial.obs";
    import { GridAction, IGridState } from "@Obsidian/Types/Controls/grid";

    const props = defineProps({
        filterValue: {
            type: String as PropType<string>,
            default: ""
        },

        gridActions: {
            type: Array as PropType<GridAction[]>,
            default: []
        },

        grid: {
            type: Object as PropType<IGridState>,
            required: true
        },

        visibleColumnCount: {
            type: Number as PropType<number>,
            default: 0
        }
    });

    const emit = defineEmits<{
        (event: "update:filterValue", value: string): void
    }>();

    const isFilterable = !props.grid.columns.some(c => c.name === "__reorder");
    const isSearchVisible = ref(false);
    const filterValue = useVModelPassthrough(props, "filterValue", emit);

    // #region Computed Values

    const searchBoxStyle = computed(() => {
        return {
            width: `${isSearchVisible.value ? 100 : 0}%`,
            overflow: "hidden",
            transition: "width 0.3s ease"
        };
    });

    // #endregion

    // #region Functions

    function onSearchClick(): void {
        isSearchVisible.value = !isSearchVisible.value;
    }

        // #endregion
</script>
