<template>
    <tr>
        <ColumnHeaderCell v-for="column in columns"
                              :column="column"
                              :filterValue="columnFilters[column.name]"
                              :sortDirection="columnSortLookup[column.name]"
                              :rows="rows"
                              :grid="grid"
                              @update:filterValue="onUpdateFilterValue(column.name, $event)"
                              @update:sortDirection="onUpdateSortDirection(column.name, $event)" />
    </tr>
</template>

<script setup lang="ts">
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    import { PropType, ref } from "vue";
    import ColumnHeaderCell from "./columnHeaderCell.partial.obs";
    import { ColumnSort, ColumnDefinition, IGridState } from "@Obsidian/Types/Controls/grid";

    const props = defineProps({
        columns: {
            type: Array as PropType<ReadonlyArray<ColumnDefinition>>,
            default: []
        },

        columnFilters: {
            type: Object as PropType<Record<string, unknown | undefined>>,
            default: {}
        },

        columnSort: {
            type: Object as PropType<ColumnSort>,
            required: false
        },

        rows: {
            type: Array as PropType<ReadonlyArray<Record<string, unknown>>>,
            required: true
        },

        grid: {
            type: Object as PropType<IGridState>,
            required: true
        }
    });

    const emit = defineEmits<{
        (event: "update:columnFilters", value: Record<string, unknown | undefined>): void,
        (event: "update:columnSort", value: { column: string, isDescending: boolean } | undefined): void
    }>();

    const columnFilters = useVModelPassthrough(props, "columnFilters", emit);
    const columnSort = useVModelPassthrough(props, "columnSort", emit);
    const columnSortLookup = ref<Record<string, number>>({});

    const updateSortLookup = (): void => {
        const lookup: Record<string, number> = {};

        for (const column of props.columns) {
            if (columnSort.value && columnSort.value.column === column.name) {
                lookup[column.name] = columnSort.value.isDescending ? -1 : 1;
            }
            else {
                lookup[column.name] = 0;
            }
        }

        columnSortLookup.value = lookup;
    };

    const onUpdateFilterValue = (columnName: string, filterValue: unknown | undefined): void => {
        const newFilters = { ...columnFilters.value };

        newFilters[columnName] = filterValue;

        columnFilters.value = newFilters;
    };

    const onUpdateSortDirection = (columnName: string, direction: number): void => {
        if (direction !== 0) {
            columnSort.value = {
                column: columnName,
                isDescending: direction < 0
            };

            updateSortLookup();
        }
    };

    updateSortLookup();
</script>
