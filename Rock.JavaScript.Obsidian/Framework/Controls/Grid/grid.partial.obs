<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <table class="grid-table table table-bordered table-striped table-hover table-obsidian" :class="{ 'table-sticky': isStickyHeader }">
        <thead>
            <FilterHeaderRow v-model:quickFilterValue="quickFilterValue"
                             :grid="gridState"
                             :enableFiltering="!reorderColumn"
                             :gridActions="gridActions"
                             :visibleColumnCount="visibleColumnCount" />

            <ColumnHeaderRow :columns="visibleColumnDefinitions"
                             v-model:columnFilters="columnFilterValues"
                             v-model:columnSort="columnSortDirection"
                             :rows="gridState.rows"
                             :grid="gridState" />
        </thead>

        <tbody v-if="dragOptions" v-dragSource="dragOptions" v-dragTarget="dragOptions">
            <DataRows
                      :columns="visibleColumnDefinitions"
                      :rows="visibleRows"
                      :grid="gridState"
                      :tooltipField="tooltipField" />
        </tbody>

        <tbody v-else>
            <tr v-if="loadingData">
                <td class="grid-error" :colspan="visibleColumnCount">
                    <LoadingIndicator />
                </td>
            </tr>

            <tr v-else-if="gridErrorMessage">
                <td class="grid-error" :colspan="visibleColumnCount">
                    <NotificationBox alertType="warning">{{ gridErrorMessage }}</NotificationBox>
                </td>
            </tr>

            <DataRows v-else
                      :columns="visibleColumnDefinitions"
                      :rows="visibleRows"
                      :grid="gridState"
                      :tooltipField="tooltipField" />
        </tbody>

        <tfoot>
            <PagerRow v-model:pageSize="pageSize"
                      v-model:currentPage="currentPage"
                      :pageCount="pageCount"
                      :pageSizes="pageSizes"
                      :message="pagerMessage"
                      :visibleColumnCount="visibleColumnCount"
                      :gridActions="gridActions" />
        </tfoot>
    </table>
</template>

<style>
table.table-obsidian {
    border-collapse: initial;
}

table.table-obsidian.table-sticky > thead {
    position: sticky;
    top: var(--top-header-height);
}

table.table-obsidian th.grid-column-header {
    position: relative;
}

table.table-obsidian th.grid-column-header,
table.table-obsidian th.grid-filter {
    background-color: #f9fafb;
    border-bottom: 1px solid #d3dfe1;
}

table.table-obsidian th.grid-column-header .btn-grid-column-filter {
    border: 0px;
    background-color: transparent;
    margin-left: 4px;
    color: #e7e7e7;
    opacity: 0.5;
    transition-duration: 250ms;
    transition-property: opacity, color;
}

table.table-obsidian th.grid-column-header .btn-grid-column-filter.active {
    color: var(--brand-success);
}

table.table-obsidian th.grid-column-header:hover .btn-grid-column-filter {
    opacity: 1;
}

table.table-obsidian th.grid-column-header .grid-filter-popup {
    position: absolute;
    display: flex;
    flex-direction: column;
    margin-top: 6px;
    min-width: 240px;
    max-width: 320px;
    max-height: 400px;
    background-color: white;
    border: 1px solid #c7c7c7;
    border-radius: 0px;
    border-bottom-right-radius: 6px;
    border-bottom-left-radius: 6px;
    box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    font-weight: initial;
    z-index: 10;
}

table.table-obsidian th.grid-column-header .grid-filter-popup .grid-filter-popup-content {
    flex-grow: 1;
    overflow-y: auto;
}

table.table-obsidian th.grid-column-header .grid-filter-popup .grid-filter-popup-body {
    margin: 10px;
    padding: 2px;
    overflow-x: clip;
}

table.table-obsidian th.grid-column-header .grid-filter-popup .actions {
    border-top: 1px solid #eee;
    padding: 12px;
}

table.table-obsidian th.grid-column-header .resize-handle {
    position: absolute;
    right: 0px;
    top: 0px;
    bottom: 0px;
    width: 2px;
    height: 100%;
    cursor: w-resize;
}

table.table-obsidian th.grid-column-header:hover .resize-handle {
    background-color: #eee;
}

/* table.table-obsidian td.grid-paging {

} */

table.table-obsidian td.grid-paging .grid-page-sizes {
    flex: 1 0;
    justify-content: start;
    align-items: center;
}

table.table-obsidian td.grid-paging .grid-page-picker {
    flex: 1 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

table.table-obsidian td.grid-paging .grid-page-picker > button {
    border: 0px;
    background-color: transparent;
    margin: 0px 5px;
    padding: 0px 6px;
}

table.table-obsidian td.grid-paging .grid-page-picker > button.disabled {
    opacity: 0.5;
    pointer-events: none;
}

table.table-obsidian td.grid-paging .grid-page-picker > button.active {
    border: 1px solid #b7b7b7;
    background-color: #f7f7f7;
}

table.table-obsidian td.grid-paging .grid-actions {
    flex: 1 0;
    display: flex;
    justify-content: end;
    align-items: center;
}

table.table-obsidian th.grid-filter {
    padding: 8px;
    font-weight: initial;
}

table.table-obsidian th.grid-filter .grid-title {
    flex: 1 0;
    align-self: center;
    font-size: 18px;
}

table.table-obsidian th.grid-filter .grid-quick-filter {
    display: flex;
}

table.table-obsidian th.grid-filter .grid-quick-filter .grid-quick-filter-search {
    max-width: 240px;
    overflow: hidden;
    transition: width 0.3s ease;
}

table.table-obsidian th.grid-filter .grid-actions {
    display: flex;
    justify-content: end;
    background-color: initial;
}

table.table-obsidian th.grid-error {
    padding: 0px;
}

table.table-obsidian th.grid-error > .alert {
    margin-bottom: 0px;
}
</style>

<script setup lang="ts">
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import LoadingIndicator from "@Obsidian/Controls/loadingIndicator";
    import ColumnHeaderRow from "./columnHeaderRow.partial.obs";
    import DataRows from "./dataRows.partial.obs";
    import FilterHeaderRow from "./filterHeaderRow.partial.obs";
    import PagerRow from "./pagerRow.partial.obs";
    import { computed, onUnmounted, PropType, ref, shallowRef, useSlots, watch } from "vue";
    import { asFormattedString } from "@Obsidian/Utility/numberUtils";
    import { pluralize } from "@Obsidian/Utility/stringUtils";
    import { getColumnDefinitions, getEntitySetBag, GridActionUrlKey, GridState } from "@Obsidian/Core/Controls/grid";
    import { DragSource as vDragSource, DragTarget as vDragTarget, IDragSourceOptions, useDragReorder } from "@Obsidian/Directives/dragDrop";
    import { ColumnSort, GridAction, ColumnDefinition, EntitySetOptions } from "@Obsidian/Types/Controls/grid";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { GridDefinitionBag } from "@Obsidian/ViewModels/Core/Grid/gridDefinitionBag";
    import { GridCommunicationBag } from "@Obsidian/ViewModels/Core/Grid/gridCommunicationBag";
    import { Guid } from "@Obsidian/Types";
    import { isPromise } from "@Obsidian/Utility/promiseUtils";
    import { useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { makeUrlRedirectSafe } from "@Obsidian/Utility/url";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { type ColInfo, type WorkSheet } from "@Obsidian/Libs/xlsx";

    /*
     * 8/17/2022 - DSH
     *
     * The grid uses a number of non-ref instances with calculations via function call.
     * This is because the normal wrapped references that Vue uses dramatically slow
     * down our filtering and sorting processes. For example, filtering over wrapped
     * references of 100,000 rows takes around 600ms. The same 100,000 rows using an
     * unwrapped raw array takes about 40ms.
     */

    // #region Component Properties

    const props = defineProps({
        /**
         * The data to be displayed in the grid. This may either be an object
         * that contains the grid data directly or a function that returns the
         * grid data. The function may return a Promise which will be waited
         * asynchronously until the data is ready.
         */
        data: {
            type: [Object, Function] as PropType<GridDataBag | (() => GridDataBag | Promise<GridDataBag>)>,
            default: []
        },

        /**
         * Contains the definition data about the grid. This contains information
         * about the fields, action URLS and other features of the grid.
         */
        definition: {
            type: Object as PropType<GridDefinitionBag>,
            required: false
        },

        /**
         * Identifies the field that will be used to uniquely identify each
         * row. This is not required but many advanced features of the grid
         * require this to function.
         */
        keyField: {
            type: String as PropType<string>,
            required: false
        },

        /**
         * Identifies the field that will contain the person key. If the grid
         * does not represent Person records then leave this unset.
         */
        personKeyField: {
            type: String as PropType<string>,
            required: false
        },

        /**
         * Specifies the fields to be used to identify communication recipients
         * when using the communicate action. This will take precedence over
         * the personKeyField if both are set.
         */
        communicationRecipientPersonKeyFields: {
            type: Array as PropType<string[]>,
            required: false
        },

        /**
         * Identifies the key that will be used to provide the tooltip text
         * for each row in the Grid. This property is not reactive.
         */
        tooltipField: {
            type: String as PropType<string>,
            required: false
        },

        /**
         * Determines if the grid will monitor for changes in the data of
         * existing rows, new rows and removed rows. Should not be used for
         * grids with more than 1,000 rows. This property is not reactive.
         */
        liveUpdates: {
            type: Boolean as PropType<boolean>,
            required: false
        },

        /** If enabled then the grid will have a sticky header. */
        stickyHeader: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * The term that identifies individual rows in the grid. This
         * property is not reactive. If not specified it will default to "item".
         * This value should be singular and not plural.
         */
        itemTerm: {
            type: String as PropType<string>,
            required: false
        },

        /**
         * The unique identifier of the entity type that the rows represent.
         */
        entityTypeGuid: {
            type: String as PropType<Guid>,
            required: false
        },

        /**
         * The title to use when exporting the grid contents. This is used as
         * the exported filename as well as some other information inside the
         * export file. If not specified it will default to the itemTerm
         * property.
         */
        exportTitle: {
            type: String as PropType<string>,
            required: false
        },

        /**
         * If `true`, then any Person operations will instead be Business
         * operations.
         */
        personAsBusiness: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * If `true`, then the merge template operation will operate as if
         * the records are Person records. If they are not then it will not
         * work correctly. This required that personKeyField also be set.
         */
        mergeTemplateAsPerson: {
            type: Boolean as PropType<boolean>,
            default: false
        },

        /**
         * Determines if the bulk update action will be available. If not
         * explicitly set then it will default to enabled if the personKeyField
         * property has been set.
         */
        showBulkUpdate: {
            type: Boolean as PropType<boolean | undefined>,
            default: undefined
        },

        /**
         * Determines if the merge person/business action will be available. If not
         * explicitly set then it will default to enabled if the personKeyField
         * property has been set.
         */
        showPersonMerge: {
            type: Boolean as PropType<boolean | undefined>,
            default: undefined
        },

        /**
         * Determines if the launch workflow action will be available. If not
         * explicitly set then it will default to enabled if the entityTypeGuid
         * and keyField properties have been set.
         */
        showLaunchWorkflow: {
            type: Boolean as PropType<boolean | undefined>,
            default: undefined
        },

        /**
         * Determines if the communicate action will be available. If not
         * explicitly set then it will default to enabled if either the
         * personKeyField or communicationRecipientPersonKeyFields properties
         * have been set.
         */
        showCommunicate: {
            type: Boolean as PropType<boolean | undefined>,
            default: undefined
        },

        /**
         * Determines if the merge template action will be available. If not
         * explicitly set then it will default to being shown. In the future
         * this default state might change.
         */
        showMergeTemplate: {
            type: Boolean as PropType<boolean | undefined>,
            default: undefined
        },

        /**
         * Determines if the export action will be available. If not explicitly
         * set then it will default to being shown. In the future this default
         * state might change.
         */
        showExport: {
            type: Boolean as PropType<boolean | undefined>,
            default: undefined
        },

        /**
         * Any fields that should be included when sending a communication. If
         * a column name matches the field name then the formatted value of
         * the column will be used. Otherwise the raw field value will be used.
         */
        communicationMergeFields: {
            type: Array as PropType<string[]>,
            default: ["expirationDateTime|Expires"]//required: false
        },

        /**
         * The function to call in response to the add button being clicked.
         */
        onAddItem: {
            type: Function as PropType<(() => void | Promise<void>)>,
            required: false
        }
    });

    // #endregion

    const slots = useSlots();
    const invokeBlockAction = useInvokeBlockAction();

    const gridState = createGridState();

    // #region Values

    const currentPage = ref(1);
    const pageSize = ref(50);
    const pageSizes = [50, 500, 5000];
    const quickFilterValue = ref("");
    const loadingData = ref(false);
    const gridErrorMessage = ref("");
    const columnFilterValues = ref<Record<string, unknown | undefined>>({});
    const columnSortDirection = ref<ColumnSort | undefined>();
    const visibleRows = ref<Record<string, unknown>[]>([]);
    const pageCount = ref(0);
    const pagerMessage = ref("");
    const visibleColumnDefinitions = shallowRef<ReadonlyArray<ColumnDefinition>>(gridState.visibleColumns);
    const dragOptions = ref<IDragSourceOptions | undefined>();
    const reorderColumn: ColumnDefinition | undefined = gridState.columns.find(c => c.name === "__reorder");

    // #endregion

    // #region Computed Values

    /**
     * Contains the number of currently visible columns.
     */
    const visibleColumnCount = computed((): number => {
        return visibleColumnDefinitions.value.length;
    });

    /**
     * Contains `true` if the merge template action should be visible.
     */
    const isMergeTemplateVisible = computed((): boolean => {
        if (!props.definition?.actionUrls?.[GridActionUrlKey.MergeTemplate]) {
            return false;
        }

        return props.showMergeTemplate !== false;
    });

    /**
     * Contains `true` if the export action should be visible.
     */
    const isExportVisible = computed((): boolean => {
        return props.showExport !== false;
    });

    /**
     * Contains `true` if the launch workflow action should be visible.
     */
    const isLaunchWorkflowVisible = computed((): boolean => {
        if (!props.definition?.actionUrls?.[GridActionUrlKey.LaunchWorkflow]) {
            return false;
        }

        // If they explicitly provided a true or a false value then use
        // those values. Otherwise, determine it automatically.
        if (props.showLaunchWorkflow === true || props.showLaunchWorkflow === false) {
            return props.showLaunchWorkflow;
        }
        else if (props.definition?.enableLaunchWorkflow !== undefined) {
            // Administrator has set it explicitly.
            return props.definition.enableLaunchWorkflow;
        }
        else {
            // Show if we have a keyField and we have an entityTypeGuid.
            return !!props.keyField && !!props.entityTypeGuid;
        }
    });

    /**
     * Contains `true` if the bulk update action should be visible.
     */
    const isBulkUpdateVisible = computed((): boolean => {
        if (!props.definition?.actionUrls?.[GridActionUrlKey.BulkUpdate]) {
            return false;
        }

        // If they explicitly provided a true or a false value then use
        // those values. Otherwise, determine it automatically.
        if (props.showBulkUpdate === true || props.showBulkUpdate === false) {
            return props.showBulkUpdate;
        }
        else {
            // Show if we have a personKeyField and we have an entityTypeGuid.
            return !!props.personKeyField && !!props.entityTypeGuid;
        }
    });

    /**
     * Contains `true` if the merge person action should be visible.
     */
    const isMergePersonVisible = computed((): boolean => {
        if (!props.definition?.actionUrls?.[GridActionUrlKey.MergePerson]) {
            return false;
        }

        if (props.personAsBusiness) {
            return false;
        }

        // If they explicitly provided a true or a false value then use
        // those values. Otherwise, determine it automatically.
        if (props.showPersonMerge === true || props.showPersonMerge === false) {
            return props.showPersonMerge;
        }
        else {
            // Show if we have a personKeyField.
            return !!props.personKeyField;
        }
    });

    /**
     * Contains `true` if the merge business action should be visible.
     */
    const isMergeBusinessVisible = computed((): boolean => {
        if (!props.definition?.actionUrls?.[GridActionUrlKey.MergeBusiness]) {
            return false;
        }

        if (!props.personAsBusiness) {
            return false;
        }

        // If they explicitly provided a true or a false value then use
        // those values. Otherwise, determine it automatically.
        if (props.showPersonMerge === true || props.showPersonMerge === false) {
            return props.showPersonMerge;
        }
        else {
            // Show if we have a personKeyField.
            return !!props.personKeyField;
        }
    });

    /**
     * Contains `true` if the communication action should be visible.
     */
    const isCommunicateVisible = computed((): boolean => {
        if (!props.definition?.actionUrls?.[GridActionUrlKey.Communicate]) {
            return false;
        }

        // If they explicitly provided a true or a false value then use
        // those values. Otherwise, determine it automatically.
        if (props.showCommunicate === true || props.showCommunicate === false) {
            return props.showCommunicate;
        }
        else {
            // Show if we have a personKeyField or if we have a set of
            // communication recipient key fields.
            return !!props.personKeyField || (props.communicationRecipientPersonKeyFields ?? []).length > 0;
        }
    });

    /**
     * Contains the array of grid actions that should currently be available
     * for the individual to interact with.
     */
    const gridActions = computed((): GridAction[] => {
        const actions: (GridAction & { isPrimary?: boolean })[] = [];

        // Append the add item action.
        if (props.onAddItem) {
            actions.push({
                buttonCssClass: "btn-add",
                handler: props.onAddItem,
                iconCssClass: "fa fa-plus-circle",
                isPrimary: true,
                title: "Add item",
                tooltip: "Add a new item."
            });
        }

        // Append the action for Merge Records.
        if (isMergeTemplateVisible.value) {
            actions.push({
                handler: onMergeTemplate,
                iconCssClass: "fa fa-files-o",
                title: "Merge Template",
                tooltip: "Merge Records into Merge Template"
            });
        }

        // Append the action for Export to Excel.
        if (isExportVisible.value) {
            actions.push({
                handler: onExport,
                iconCssClass: "fa fa-table",
                title: "Export",
                tooltip: "Export to Excel"
            });
        }

        // Append the action for Launch Workflow.
        if (isLaunchWorkflowVisible.value) {
            actions.push({
                handler: onLaunchWorkflow,
                iconCssClass: "fa fa-cog",
                title: "Launch Workflow",
                tooltip: "Launch Workflow"
            });
        }

        // Append the action for Bulk Update.
        if (isBulkUpdateVisible.value) {
            actions.push({
                handler: onBulkUpdate,
                iconCssClass: "fa fa-truck",
                title: "Bulk Update",
                tooltip: "Bulk Update"
            });
        }

        // Append the action for Merge Person Records.
        if (isMergePersonVisible.value) {
            actions.push({
                handler: onPersonMerge,
                iconCssClass: "fa fa-users",
                title: "Merge Person Records",
                tooltip: "Merge Person Records"
            });
        }

        // Append the action for Merge Business Records.
        if (isMergeBusinessVisible.value) {
            actions.push({
                handler: onPersonMerge,
                iconCssClass: "fa fa-sign-in-alt",
                title: "Merge Business Records",
                tooltip: "Merge Business Records"
            });
        }

        // Append the action for Communicate.
        if (isCommunicateVisible.value) {
            actions.push({
                handler: onCommunicate,
                iconCssClass: "fa fa-comment",
                title: "Communicate",
                tooltip: "Communicate"
            });
        }

        // Append the custom actions defined in the block settings.
        if (props.definition?.customActions) {
            for (const action of props.definition.customActions) {
                if (!action.iconCssClass || !action.route) {
                    continue;
                }

                actions.push({
                    handler: () => onCustomRoute(action.route ?? ""),
                    iconCssClass: action.iconCssClass,
                    title: action.name || "Custom Action",
                    tooltip: action.description ?? undefined
                });
            }
        }

        return actions;
    });

    /**
     * Contains `true` if the sticky header should be enabled on this grid.
     */
    const isStickyHeader = computed((): boolean => {
        return props.stickyHeader || props.definition?.enableStickyHeader === true;
    });

    // #endregion

    // #region Functions

    /**
     * Creates the object that will track the grid state and provide most of
     * the features required by all the grid components.
     */
    function createGridState(): GridState {
        const state = new GridState(
            getColumnDefinitions(slots["default"]?.() ?? []),
            props.definition,
            props.liveUpdates ?? false,
            props.itemTerm || "item",
            props.entityTypeGuid);

        state.setItemKey(props.keyField);

        return state;
    }

    /**
     * Updates the {@link visibleRows} value based on the current selections.
     */
    function updateVisibleRows(): void {
        const startIndex = (currentPage.value - 1) * pageSize.value;

        visibleRows.value = gridState.sortedRows.slice(startIndex, startIndex + pageSize.value);
    }

    /**
     * Updates the {@link pageCount} value based on the current filters and
     * selected page size.
     */
    function updatePageCount(): void {
        pageCount.value = Math.ceil(gridState.filteredRows.length / pageSize.value);
    }

    /**
     * Updates the message to be displayed in the pager footer. This describes
     * the items and how many there are.
     */
    function updatePagerMessage(): void {
        pagerMessage.value = `${asFormattedString(gridState.filteredRows.length)} ${pluralize(gridState.itemTerm, gridState.filteredRows.length)}`;
    }

    /**
     * Set the width of all columns of the given worksheet,
     * to fit the content of the cells.
     */
    function autoFitExportColumns(worksheet: WorkSheet): void {
        const ref = worksheet["!ref"];

        if (!ref) {
            return;
        }

        // Extract the column range. This is in the format of "A1:F48".
        const colRange = ref.split(":");
        const firstCol = colRange[0];
        const lastCol = colRange[1];

        // Extract the letter from each segment to determine the first and
        // last column. This won't work if there are more than 26 columns.
        const firstColIndex = firstCol.charCodeAt(0);
        const lastColIndex = lastCol.charCodeAt(0);

        // Determine the number of rows to be scanned.
        const lastColMatch = new RegExp(/\d+$/g).exec(lastCol);
        const rows = lastColMatch ? Number(lastColMatch[0]) : 0;

        const objectMaxLength: ColInfo[] = [];

        // Loop on columns.
        for (let colIndex = firstColIndex; colIndex <= lastColIndex; colIndex++) {
            // Check if we have gone past column "Z".
            if (colIndex > 90) {
                break;
            }

            const col = String.fromCharCode(colIndex);
            let maxCellLength = 0;

            // Loop on rows.
            for (let row = 1; row <= rows; row++) {
                const cell = worksheet[`${col}${row}`];
                if (cell) {
                    let cellLength: number;

                    if (cell.t === "s") {
                        cellLength = cell.v.length + 1;
                    }
                    else if (cell.t === "d") {
                        cellLength = 11;
                    }
                    else {
                        cellLength = String(cell.v).length + 1;
                    }

                    if (cellLength > maxCellLength) {
                        maxCellLength = Math.min(50, cellLength);
                    }
                }
            }

            objectMaxLength.push({
                width: Math.max(4, maxCellLength)
            });
        }

        worksheet["!cols"] = objectMaxLength;
    }

    /**
     * Begin loading the grid data.
     */
    async function updateGridData(): Promise<void> {
        // Show an indicator that we are loading data from the server.
        loadingData.value = true;

        // Check if they gave us real data or a function to call.
        if (typeof props.data === "object") {
            // We got real data. Just set it on the grid strate.
            gridState.setDataRows(props.data.rows ?? []);
        }
        else if (typeof props.data === "function") {
            // We got a function to be called.
            try {
                let data = props.data();

                if (isPromise(data)) {
                    data = await data;
                }

                gridState.setDataRows(data.rows ?? []);
                gridErrorMessage.value = "";
            }
            catch (error) {
                gridErrorMessage.value = error instanceof Error ? error.message : new String(error).toString();
            }
        }

        // If we don't have any error, then proceed with final setup of the
        // data that was received.
        if (!gridErrorMessage.value) {
            setupManualOrdering();
        }

        loadingData.value = false;
    }

    /**
     * Attempt to setup the manual re-ordering logic to support drag and drop
     * of the rows.
     */
    function setupManualOrdering(): void {
        // If we don't have a re-order column, then nothing to do.
        if (!reorderColumn) {
            dragOptions.value = undefined;
            return;
        }

        // If we have a re-order column but no keyField then throw an error.
        if (!props.keyField) {
            throw new Error("Re-ordering rows requires each row has a unique key.");
        }

        // Create an observable value that cells can use to determine if a drop
        // operation is in progress. This is used by them to prevent starting
        // a new drag operation until the previous drop operation has completed.
        const dropOperationInProgress = ref(false);
        reorderColumn.data.dropOperationInProgress = dropOperationInProgress;

        // Configure the drag and drop feature.
        dragOptions.value = useDragReorder(visibleRows, async (item, beforeItem) => {
            // The visibleRows object has already been updated. Allow the
            // component using the grid a chance to move their own data around.
            if (typeof reorderColumn.props.onOrderChanged !== "function") {
                return true;
            }

            // We don't have type information, so cast it to what they are
            // supposed to provide.
            const fn = reorderColumn.props.onOrderChanged as (item: Record<string, unknown>, beforeItem: Record<string, unknown> | null, order: number) => void | Promise<void> | boolean | Promise<boolean>;

            // Indicate to the cells that a drop operation is in progress.
            dropOperationInProgress.value = true;

            try {
                const result = fn(item, beforeItem, visibleRows.value.indexOf(item));

                if (isPromise(result)) {
                    await result;
                }

                // If they returned anything other than false then allow the
                // drop operation complete successfully. This allows them to
                // return void/nothing to mean success.
                return result !== false;
            }
            finally {
                // Indicate to cells that the drop operation has completed.
                dropOperationInProgress.value = false;
            }
        });
    }

    /**
     * Uses a block action to create a new communication for the recipients and
     * then redirects the individual to the configured URL.
     *
     * @param communicationBag The communication bag that describes the communication to be created.
     * @param url The URL to redirect to after the communication has been created.
     */
    async function createCommunicationAndRedirect(communicationBag: GridCommunicationBag, url: string): Promise<void> {
        const args = {
            communication: communicationBag
        };

        const result = await invokeBlockAction<Guid>("CreateGridCommunication", args);

        if (!result.isSuccess || !result.data) {
            return await alert(result.errorMessage || "Unable to create communication.");
        }

        const finalUrl = makeUrlRedirectSafe(url.replace("{CommunicationId}", `${result.data}`));

        window.location.href = finalUrl;
    }

    /**
     * Uses a block action to create a new entity set for the items in the
     * grid and then redirects the individual to the configured URL.
     *
     * @param keyFields The key field(s) to use when getting the entity keys.
     * @param url The URL to redirect the individual to after creating the entity set.
     * @param options The options to be passed to {@link getEntitySetBag}.
     */
    async function createEntitySetAndRedirect(keyFields: string[], url: string, options: EntitySetOptions | undefined): Promise<void> {
        // Get the entity set to be sent to the server.
        const args = {
            entitySet: await getEntitySetBag(gridState, keyFields, options)
        };

        const result = await invokeBlockAction<Guid>("CreateGridEntitySet", args);

        if (!result.isSuccess || !result.data) {
            return await alert(result.errorMessage || "Unable to create entity set.");
        }

        const finalUrl = makeUrlRedirectSafe(url.replace("{EntitySetId}", `${result.data}`));

        window.location.href = finalUrl;
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when the bulk update grid action has been clicked.
     */
    async function onBulkUpdate(): Promise<void> {
        const url = props.definition?.actionUrls?.[GridActionUrlKey.BulkUpdate];

        if (!props.personKeyField || !url) {
            return;
        }

        const options: EntitySetOptions = {
            entityTypeGuid: EntityType.Person
        };

        await createEntitySetAndRedirect([props.personKeyField], url, options);
    }

    /**
     * Called when either the merge person or merge business grid actions
     * have been clicked.
     */
    async function onPersonMerge(): Promise<void> {
        let url: string | undefined;

        if (props.personAsBusiness) {
            url = props.definition?.actionUrls?.[GridActionUrlKey.MergeBusiness];
        }
        else {
            url = props.definition?.actionUrls?.[GridActionUrlKey.MergePerson];
        }

        if (!props.personKeyField || !url) {
            return;
        }

        await createEntitySetAndRedirect([props.personKeyField], url, undefined);
    }

    /**
     * Called when the merge template grid action has been clicked.
     */
    async function onMergeTemplate(): Promise<void> {
        const url = props.definition?.actionUrls?.[GridActionUrlKey.MergeTemplate];

        if (!props.keyField || !url) {
            return;
        }

        if (props.mergeTemplateAsPerson && props.personKeyField) {
            await createEntitySetAndRedirect([props.personKeyField], url, undefined);
        }
        else if (props.entityTypeGuid) {
            await createEntitySetAndRedirect([props.keyField], url, undefined);
        }
        else {
            console.log("Performing long merge");
            // Find all columns that aren't special columns and include them in
            // the additional merge fields.
            const mergeColumns: Record<string, string> = {};
            const dataColumns = gridState.columns
                .filter(c => !c.name.startsWith("__"));

            for (const column of dataColumns) {
                mergeColumns[column.name] = `${column.name[0].toUpperCase()}${column.name.substring(1)}`;
            }

            const options: EntitySetOptions = {
                mergeColumns
            };

            await createEntitySetAndRedirect([props.keyField], url, options);
        }
    }

    /**
     * Called when the export grid action has been clicked.
     */
    async function onExport(): Promise<void> {
        // Find all columns that aren't special columns and include them in
        // the additional merge fields.
        const mergeColumns: Record<string, string> = {};
        const dataColumns = gridState.columns
            .filter(c => !c.name.startsWith("__") && !c.excludeFromExport);

        for (const column of dataColumns) {
            mergeColumns[column.name] = `${column.name[0].toUpperCase()}${column.name.substring(1)}`;
        }

        const options: EntitySetOptions = {
            mergeColumns,
            purpose: "export"
        };

        const entitySet = await getEntitySetBag(gridState, [], options);

        const data: unknown[][] = [];

        // Build the header row.
        const headerRow: string[] = [];
        data.push(headerRow);

        for (const key of Object.keys(mergeColumns)) {
            const column = gridState.columns.find(c => c.name === key);

            headerRow.push(column?.title ?? key);
        }

        // Build the data rows.
        for (const item of (entitySet.items ?? [])) {
            const row: unknown[] = [];

            for (const key of Object.keys(mergeColumns)) {
                let value = item.additionalMergeValues?.[mergeColumns[key]];

                if (value instanceof RockDateTime) {
                    value = new Date(value.toMilliseconds());
                }

                row.push(value);
            }

            data.push(row);
        }

        // Generate the excel file and initiate the download.
        const title = props.exportTitle || pluralize(gridState.itemTerm);
        const filename = title.replace(/[^a-zA-Z0-9\-_]/g, "");
        const xlsx = (await import("@Obsidian/Libs/xlsx")).default;
        const worksheet = xlsx.utils.aoa_to_sheet(data, { cellDates: true });
        const workbook = xlsx.utils.book_new();

        // Bold the header row.
        for (let columnIndex = 0; columnIndex < headerRow.length; columnIndex++) {
            let ref: string;

            if (columnIndex < 26) {
                ref = `${String.fromCharCode(65 + columnIndex)}1`;
            }
            else {
                continue;
            }

            worksheet[ref].s = {
                font: {
                    bold: true
                }
            };
        }

        // Calculate rough column width.
        autoFitExportColumns(worksheet);

        xlsx.utils.book_append_sheet(workbook, worksheet, "Sheet 1");
        xlsx.writeFile(workbook, `${filename}.xlsx`, { compression: true });
    }

    /**
     * Called when the launch workflow grid action has been clicked.
     */
    async function onLaunchWorkflow(): Promise<void> {
        const url = props.definition?.actionUrls?.[GridActionUrlKey.LaunchWorkflow];

        if (!props.keyField || !url) {
            return;
        }

        await createEntitySetAndRedirect([props.keyField], url, undefined);
    }

    /**
     * Called when the communication grid action has been clicked.
     */
    async function onCommunicate(): Promise<void> {
        const url = props.definition?.actionUrls?.[GridActionUrlKey.Communicate];
        let keyFields: string[] = [];

        // Determine which key fields to use to find people.
        if (props.communicationRecipientPersonKeyFields) {
            keyFields = props.communicationRecipientPersonKeyFields;
        }
        else if (props.personKeyField) {
            keyFields = [props.personKeyField];
        }

        // If we don't have any key fields or a URL then nothing to do.
        if (keyFields.length === 0 || !url) {
            return;
        }

        const options: EntitySetOptions = {
            additionalMergeFieldsFactory: undefined,
            purpose: "communication"
        };

        // TypeScript isn't happy if we set these above.
        options.mergeColumns = {};
        options.mergeFields = {};
        const mergeFields: string[] = [];

        // If they have specified which additional merge fields to be included
        // in the communication, add those to the list of mergeFields.
        if (props.communicationMergeFields) {
            for (const mf of props.communicationMergeFields) {
                const parts = mf.split("|")
                    .map(f => f.replace(/\./g, "_"))
                    .filter(f => f !== "");

                // If we have a column that matches the name, put it in the
                // mergeColumns. Otherwise put it in the mergeFields. This
                // basically means, give us the formatted value or the raw value.
                if (gridState.columns.some(c => c.name === parts[0])) {
                    options.mergeColumns[parts[0]] = parts.length >= 2 ? parts[1] : parts[0];
                }
                else {
                    options.mergeFields[parts[0]] = parts.length >= 2 ? parts[1] : parts[0];
                }

                mergeFields.push(parts.length >= 2 ? parts[1] : parts[0]);
            }
        }

        // Get all the data from the grid.
        const entitySet = await getEntitySetBag(gridState, keyFields, options);

        const communicationBag: GridCommunicationBag = {
            recipients: entitySet.items,
            fromUrl: window.location.href
        };

        // Determine if we have anything that should show up in the
        // "Additional Merge Fields" option of the lava field picker.
        if (props.communicationRecipientPersonKeyFields) {
            communicationBag.mergeFields = [`AdditionalMergeFields|${mergeFields.join("^")}`];
        }
        else {
            communicationBag.mergeFields = mergeFields;
        }

        await createCommunicationAndRedirect(communicationBag, url);
    }

    /**
     * Called when a custom grid action has been clicked.
     */
    async function onCustomRoute(url: string): Promise<void> {
        if (!props.keyField || !url) {
            return;
        }

        const options: EntitySetOptions = {
            entityTypeGuid: props.entityTypeGuid
        };

        let fixedUrl: string;

        if (url.includes("{0}")) {
            fixedUrl = url.replace(/\{0\}/g, "{EntitySetId}");
        }
        else {
            fixedUrl = url.includes("?")
                ? `${url}&EntitySetId={EntitySetId}`
                : `${url}?EntitySetId={EntitySetId}`;
        }

        await createEntitySetAndRedirect([props.keyField], fixedUrl, options);
    }

    /**
     * Called when the {@link gridState.sortedRows} value has changed. Update
     * all the visible row information.
     */
    function onSortedRowsChanged(): void {
        updateVisibleRows();
        updatePageCount();
        updatePagerMessage();
    }

    // #endregion

    watch([quickFilterValue, columnFilterValues], () => {
        currentPage.value = 1;
        gridState.setFilters(quickFilterValue.value, columnFilterValues.value);
    });

    watch(columnSortDirection, () => {
        gridState.setSort(columnSortDirection.value);
    });

    watch([currentPage, pageSize], () => {
        updateVisibleRows();
    });

    watch(() => props.keyField, () => {
        gridState.setItemKey(props.keyField);
    });

    gridState.on("sortedRowsChanged", onSortedRowsChanged);

    onUnmounted(() => {
        gridState.off("sortedRowsChanged", onSortedRowsChanged);
        gridState.dispose();
    });

    updateGridData();
</script>
