<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid ref="myGrid"
          :definition="configuration.gridDefinition"
          :data="loadGridData"
          keyField="guid"
          personKeyField="personId"
          :communicationRecipientPersonKeyFields="['personId']"
          stickyHeader
          tooltipField="attr_TextValue1"
          entityTypeGuid="F13C8FD2-7702-4C79-A6A9-86440DD5DE13"
          @addItem="() => {}">
        <SelectColumn />
        <!-- <ReorderColumn @orderChanged="onOrderChanged" /> -->

        <Column name="name" title="Name" sortValue="{{ row.name.lastName }} {{ row.name.firstName }}" :filter="textValueFilter" filterValue="{{ row.name.firstName }} {{ row.name.lastName }}" quickFilterValue="{{ row.name.firstName }} {{  row.name.lastName }}">
            <template #format="{ row }">
                {{ row.name.firstName }} {{ row.name.lastName }}
            </template>
        </Column>

        <Column name="email" title="Email" field="email" sortField="email" :filter="pickExistingValueFilter" />

        <Column name="enteredDateTime" title="Entered On" field="enteredDateTime" sortField="enteredDateTime">
            <template #format="{ row }">
                {{ formatDate(row.enteredDateTime) }}
            </template>
        </Column>

        <NumberColumn name="id" title="Id" field="id" sortField="id" :filter="numberValueFilter" />

        <DateColumn name="expirationDateTime" title="Expires" field="expirationDateTime" :filter="dateValueFilter" sortField="expirationDateTime" />

        <BooleanColumn name="isUrgent" title="Urgent" field="isUrgent" sortField="isUrgent" />

        <LabelColumn name="isUrgent"
                     title="Urgent"
                     field="isUrgent"
                     sortField="isUrgent"
                     :classSource="badgeClassLookup" />

        <LabelColumn name="isUrgent2"
                     title="Urgent 2"
                     field="isUrgent"
                     sortField="isUrgent"
                     :colorSource="badgeColorLookup" />

        <LabelColumn name="mode"
                     title="Mode"
                     field="mode"
                     :filter="pickExistingValueFilter"
                     quickFilterValue="{{ row.mode.text }}" />

        <BooleanColumn name="isPublic"
                       title="Public"
                       field="isPublic"
                       sortField="isPublic" />

        <AttributeColumns :attributes="attributeFields" />

        <EditColumn :onClick="onEditClick" />

        <SecurityColumn itemTitle="email" />

        <DeleteColumn :onClick="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    // #region Imports
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { ref } from "vue";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { GridDefinitionBag } from "@Obsidian/ViewModels/Core/Grid/gridDefinitionBag";
    import Grid, { AttributeColumns, BooleanColumn, Column, DateColumn, dateValueFilter, DeleteColumn, EditColumn, LabelColumn, NumberColumn, numberValueFilter, pickExistingValueFilter, ReorderColumn, SecurityColumn, SelectColumn, textValueFilter } from "@Obsidian/Controls/grid";

    // #endregion

    const configuration = useConfigurationValues<{ gridDefinition: GridDefinitionBag }>();
    const invokeBlockAction = useInvokeBlockAction();

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const badgeClassLookup = {
        "true": "success",
        "false": "danger"
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-unused-vars
    const badgeColorLookup = {
        "true": "#30cc30",
        "false": "#cc0000"
    };

    const attributeFields = configuration.gridDefinition.attributeFields ?? [];

    const loadGridData = async (): Promise<GridDataBag> => {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            const d = ref(result.data.rows ?? []);
            // setTimeout(() => (d.value[0] as Record<string, Record<string, string>>)["name"]["firstName"] = "Daniel", 2000);
            // setTimeout(() => d.value.splice(2, 1), 4000);
            return {
                rows: d.value
            };
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    };

    function formatDate(value?: string): string {
        if (!value) {
            return "";
        }

        const dt = RockDateTime.parseISO(value);

        return dt?.toASPString("g") ?? "";
    }

    async function onEditClick(key: string): Promise<void> {
        return new Promise<void>(resolve => {
            console.log(`Edit '${key}'.`);
            setTimeout(() => {
                resolve();
            }, 1000);
        });
    }

    async function onDeleteClick(key: string): Promise<void> {
        return new Promise<void>(resolve => {
            console.log(`Delete '${key}'.`);
            setTimeout(() => {
                resolve();
            }, 500);
        });
    }

    async function onOrderChanged(): Promise<boolean> {
        return new Promise<boolean>(resolve => {
            setTimeout(() => resolve(true), 1000);
        });
    }
</script>
